#!/usr/bin/env python3

#################################
#  
#   This script load the final 
#   particles generated by the 
#   files tau_pi2munu.py (MC) 
#   (gamma/e/mu/pi/K/proton/K_L)
#
#################################

import basf2 as b2
import variables.collections as vc
import modularAnalysis as ma

# create path 
my_path = b2.create_path()

# load input ROOT file
ma.inputMdst(environmentType='default',
             filename=b2.find_file('../Generation/RootFiles/tau_pi2munu_generation.root'),
             path=my_path)

# print contents of the DataStore before loading MCParticles
ma.printDataStore(path=my_path)

# create and fill gamma/e/mu/pi/K/p ParticleLists
# second argument are the selection criteria: '' means no cut, take all
photons = ('gamma:gen' ,'')
electrons = ('e-:gen', '')
muons = ('mu-:gen', '')
pions = ('pi-:gen', '')
kaons = ('K+:gen', '')
protons = ('anti-p-:gen', '')

ma.fillParticleListsFromMC([photons, electrons, muons, pions, kaons, protons], path=my_path)

# print contents of the DataStore after loading MCParticles
# the difference is that DataStore now contains StoreArray<Particle>
# filled with Particles created from generated final state particles
ma.printDataStore(path=my_path)

#print out the contents of each ParticleList 

# Select variables that we want to store to ntuple
# You can either use preselected variable groups from variableCollections
# or use your own lists. Both options are shown here.

# Note: vc.<collection> is a list of (variables); multuple list are
# concatenated with the + operator.

charged_particle_variables = vc.reco_stats + \
    vc.kinematics + \
    vc.track + \
    vc.track_hits + \
    vc.pid + \
    vc.mc_truth + \
    vc.mc_kinematics

gamma_variables = vc.kinematics + \
    vc.mc_kinematics + \
    vc.cluster

# Saving variables to ntuple
output_file = 'NTuples/tau_pi2munu_MC_Generation.root'
ma.variablesToNtuple(decayString='gamma:gen',
                     variables=charged_particle_variables,
                     treename='phot',
                     filename=output_file,
                     path=my_path)
ma.variablesToNtuple(decayString='e+:gen',
                     variables=charged_particle_variables,
                     treename='elec',
                     filename=output_file,
                     path=my_path)
ma.variablesToNtuple(decayString='mu+:gen',
                     variables=charged_particle_variables,
                     treename='muon',
                     filename=output_file,
                     path=my_path)
ma.variablesToNtuple(decayString='pi+:gen',
                     variables=charged_particle_variables,
                     treename='pion',
                     filename=output_file,
                     path=my_path)
ma.variablesToNtuple(decayString='K+:gen',
                     variables=charged_particle_variables,
                     treename='kaon',
                     filename=output_file,
                     path=my_path)
ma.variablesToNtuple(decayString='anti-p-:gen',
                     variables=charged_particle_variables,
                     treename='anti-p',
                     filename=output_file,
                     path=my_path)

# Process the events
b2.process(my_path)

# print out the summary
print(b2.statistics)
